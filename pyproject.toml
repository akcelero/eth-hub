[project]
name = "eth-hub"
dynamic = ["version"]
description = "Flexible Ethereum key management and signing library supporting local and external backends."
readme = "README.md"
requires-python = ">=3.11"
authors = [{ name = "akcelero", email = "akcelero@gmail.com" }]
license = "MIT"
keywords = ["ethereum", "signing", "vault", "key management", "crypto"]
dependencies = [
    "boto3-stubs[kms]>=1.38.9, <2.0.0",
    "boto3>=1.38.9, <2.0.0",
    "botocore>=1.38.9, <2.0.0",
    "cryptography>=44.0.3, <46.0.0",
    "eth-account>=0.13.7, <1.0.0",
    "eth-keys>=0.7.0, <0.8.0",
    "mypy-boto3-kms>=1.38.0, <2.0.0",
    "pydantic~=2.11.4",
    "asn1crypto~=1.5.1",
]
classifiers = [
    "Development Status :: 3 - Alpha",

    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Libraries :: Python Modules",

    "License :: OSI Approved :: MIT License",

    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "pytest-mock>=3.14.0",
    "ruff>=0.11.11",
]

[project.urls]
Homepage = "https://github.com/akcelero/eth-hub"
Repository = "https://github.com/akcelero/eth-hub"
Issues = "https://github.com/akcelero/eth-hub/issues"

[build-system]
requires = ["uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[[tool.mypy.overrides]]
module = "rlp"
ignore_missing_imports = true

[tool.uv]
dev-dependencies = [
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "pytest-mock>=3.14.0",
    "ruff>=0.11.8",
]

[[tool.uv.index]]
name = "test-pypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple/"
publish-url = "https://upload.pypi.org/legacy/"
explicit = true

[tool.ruff.lint]
select = [
    "FAST",  # FastAPI
    "ASYNC",  # flake8-async
    "S",  # bandit
    "BLE",  # flake8-blind-except
    "A",  # flake8-builtins
    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "SLOT",  # flake8-slots
    "TID",  # flake8-tidy-imports
    "TD",  # flake8-todos
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "FLY",  # flynt
    "I",  # isort
    "C90",  # mccabe
    "N",  # pep8-naming
    "PERF",  # Perflint
    "E",  # Error
    "W",  # Warning
    "F",  # Pyflakes
    "PL",  # Pylint
    "UP",  # pyupgrade
    "FURB",  # refurb
    "RUF",  # Ruff-specific rules
    "TRY",  # tryceratops
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "S101"  # Checks for uses of the assert keyword.
]
"aws_mock.py" = [
    "ARG002"  # Unused method argument
]

[tool.ruff]
line-length = 120
